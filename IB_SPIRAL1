import java.util.ArrayList;
import java.util.List;

public class Solution {
    // DO NOT MODIFY THE LIST
    public  ArrayList<Integer> spiralOrder(final List<ArrayList<Integer>> a) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        int i=0,j=0,k=0,m=a.size()-1,n=a.get(0).size()-1,layer=0;
        result.add(a.get(0).get(0));
        int size=(m+1)*(n+1);
      //  System.out.println("m "+m+" n "+n+" size "+size);
        /*if(m==1 && n==1) return result;*/
        System.out.println("("+i+" : "+j+")");
        while (k<size-1){
            while(i<n-layer && k<size-1){
                result.add(a.get(j).get(++i));k++; System.out.println("R("+i+" : "+j+")"+k+" < "+size);} //layer,layer -> layer,n-1-layer
            while(j<m-layer&& k<size-1){
                result.add(a.get(++j).get(i));k++;System.out.println("D("+i+" : "+j+")"+k+" < "+size);} //layer+1,n-1-layer -> m-1-layer,n-1-layer
            while(i>layer&& k<size-1){
                result.add(a.get(j).get(--i));k++;System.out.println("L("+i+" : "+j+")"+k+" < "+size);} //m-1-layer,n-2-layer -> m-1-layer,layer
            while(j>layer+1&& k<size-1){
                result.add(a.get(--j).get(i));k++;System.out.println("U("+i+" : "+j+")"+k+" < "+size);} // m-1-layer,layer -> layer
            if(k>=size-1)break;
            layer++;i=layer-1;
            System.out.println(layer);

        }
        // Populate result;
        return result;
    }
    public static void main(String[] args){
        /*final List<ArrayList<Integer>> a = new ArrayList<ArrayList<Integer>>() ;
        a.add(new ArrayList<Integer>(){{add(1);add(2);add(7);add(10);}});
        a.add(new ArrayList<Integer>(){{add(3);add(4);add(9);add(11);}});
        a.add(new ArrayList<Integer>() {{add(5);add(6);add(8);add(12);}});
        a.add(new ArrayList<Integer>() {{add(13);add(14);add(15);add(16);}});*/
    	final List<ArrayList<Integer>> a = new ArrayList<ArrayList<Integer>>() ;
        a.add(new ArrayList<Integer>(){{add(1);}});
        a.add(new ArrayList<Integer>(){{add(2);}});
        a.add(new ArrayList<Integer>(){{add(3);}});
        Solution s= new Solution();
        ArrayList<Integer> b = s.spiralOrder(a);
        for (Integer in:
             b) {
            System.out.print(in +" ");
        }
    }

}

